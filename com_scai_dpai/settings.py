"""
Django settings for com_scai_dpai project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import logging.config
from django.utils.log import DEFAULT_LOGGING
import logging
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#URLs
CONFIGURATION_API_URL = os.getenv('configurationApiUrl', "https://scai-dev-api.3sc.ai/")
ENTITIES_API_URL = os.getenv('entitiesApiUrl', "https://scai-dev-api.3sc.ai/")
IAM_API_URL = os.getenv('iamApiUrl', "https://scai-dev-iam.3sc.ai/")
DATA_SCIENCE_URL = os.getenv('dsApiUrl', "http://52.172.92.11:8000/forecast/")
ALERTS_API_URL = os.getenv('alertApi', "https://scai-dev-api.3sc.ai/")
PLATFORM_URL = os.getenv('platformUrl', "https://dev.3sc.ai")
DPAI_API_URL = os.getenv('dpaiApiUrl', "https://scai-dev-api.3sc.ai/")

# BASE URL
LOGIN_API_BASE_URL = "api/v1/users/login/"
CONFIGURATION_API_BASE_URL = "configuration/v1"
PERSONNEL_API_BASE_URL = "entities/personnel/v1"
NETWORK_API_BASE_URL = "entities/network/v1"
PRODUCT_API_BASE_URL = "entities/product/v1"
LOCATION_API_BASE_URL = "entities/location/v1"
MAPPING_API_BASE_URL = "entities/mapping/v1"
SALESHISTORY_API_BASE_URL = "transaction/saleshistory/v1"
FORECAST_SUMMARY_API_BASE_URL = "transaction/forecast/v1"
PRODUCT_API_URL = ENTITIES_API_URL + "product/v1"
MAPPING_API_URL = ENTITIES_API_URL + "mapping/v1"
LOCATION_API_URL = ENTITIES_API_URL + "location/v1"
NETWORK_API_URL = ENTITIES_API_URL + "network/v1"
ALERTS_API_BASE_URL = "notifications/v1/email"
STATISTICAL_FORECAST_BASE_URL = "dp/forecast/statistical"
SIMULATION_FORECAST_BASE_URL = "dp/simulate"
FEATURE_API_BASE_URL = "transaction/features/v1"
EVENT_API_BASE_URL = "externalfactors/events/v1"
PROMOTION_API_BASE_URL = "externalfactors/promotiontype/v1"
NOTIFICATION_API_BASE_URL = "notification/v1"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = b'django-insecure-@%movk#(x8jkoq7=8!6map!y(d5)zn4k-xmk_%q8bye+81-0t3'
DATE_FORMAT = "%Y-%m-%d"

# Valid Response Codes
VALID_RESPONSE_CODES = [200, 201, 204]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False
}

# Application definition
SHARED_APPS = (
    'django_crontab',
    'django_tenants',  # mandatory # you must list the app where your tenant model resides in
    'django.contrib.contenttypes',
    # everything below here is optional
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.admin',
    'rest_framework',
    'rest_framework.authtoken',
    'app',
    'snop',
    'tenant'
)

TENANT_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "rest_framework",
    "django_filters",
    'rest_framework',
    'rest_framework.authtoken',
    "app",
    'snop',
    "tenant"
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

TENANT_MODEL = "tenant.Client"

INSTALLED_APPS = list(SHARED_APPS)

MIDDLEWARE = [
    'tenant.middleware.RequestIDTenantMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'com_scai_dpai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'com_scai_dpai.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': os.getenv('databaseName', "dpai_dev"),
        'USER': os.getenv('databaseUsername', "scaidevadmin"),
        'PASSWORD': os.getenv('databasePassword', "Passw0rD-1251"),
        'HOST': os.getenv('databaseHostName', "scai-weu-adp-dev.postgres.database.azure.com"),
        'PORT': os.getenv('databasePort', 5432),
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://scai-weu-rgp-dev.redis.cache.windows.net:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": "",
        },
    "TIMEOUT": 60*60*24
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# os.environ["MODIN_ENGINE"] = "ray"


# DATABASES = {
#     'default': {
#         'ENGINE': 'django_tenants.postgresql_backend',
#         'NAME': os.getenv('POSTGRES_DATABASE_NAME', "latestdpailocal"),
#         'USER': os.getenv('POSTGRES_DATABASE_USER', "postgres"),
#         'PASSWORD': os.getenv('POSTGRES_DATABASE_PASSWORD', "root"),
#         'HOST': os.getenv('POSTGRES_DATABASE_HOSTNAME', "localhost"),
#         'PORT': os.getenv('POSTGRES_PORT', 5434),
#     }
# }



DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
APPEND_SLASH = False

# Disable Django's logging setup
LOGGING_CONFIG = None
LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        # console logs to stderr
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # default for all undefined Python modules
        '': {
            'level': 'WARNING',
            'handlers': ['console'],
        },
        # Our application code
        'app': {
            'level': LOGLEVEL,
            'handlers': ['console'],
            # Avoid double logging because of root logger
            'propagate': False,
        },
        # Default runserver request logging
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    },
})
'''SYS_ADMIN Credentials'''
EMAIL = "3scadmin@gmail.com"
PASSWORD = "3scSolutions@123"
TRIGGER_FORECAST_ENVIRONMENT_STRING = ""
TRIGGER_FORECAST_ENVIRONMENT_VARIABLES = ["databasePassword", "databaseName", "databaseUsername", "databaseHostName", "databasePort", "entitiesApiUrl", "configurationApiUrl", "iamApiUrl", "dsApiUrl", "alertApi", "platformUrl", "systemAdminEmail", "systemAdminPassword", "blobURL", "blobMasterFileContainer", "dpaiApiUrl", "blobForecastMasterFileContainer"]
for envkey in os.environ.keys():
    if envkey in TRIGGER_FORECAST_ENVIRONMENT_VARIABLES:
       TRIGGER_FORECAST_ENVIRONMENT_STRING = TRIGGER_FORECAST_ENVIRONMENT_STRING + " " + envkey + '=' + os.getenv(envkey)

CRONTAB_COMMAND_PREFIX = TRIGGER_FORECAST_ENVIRONMENT_STRING
CRONJOBS = [
    ('*/15 * * * *', 'app.crons.triggerForecast.triggerForecast', '>> /cron/triggerForecast_cron.log 2>&1'),
    ('25 6 * * *', 'app.crons.forecastApprovalRemainderCron.forecast_approval_remainder_cron', '>> /cron/triggerForecast_cron.log 2>&1'),
    ('1 0 * * *', 'app.crons.fileManager.FileManager', '>> /cron/triggerForecast_cron.log 2>&1')
]

SYS_ADMIN_EMAIL = os.getenv('systemAdminEmail', "SYS_ADMIN@3scsolution.com")
SYS_ADMIN_PASSWORD = os.getenv('systemAdminPassword', "3scSolutions@123")

BLOB_URL = os.getenv('blobURL', "")
BLOB_FORECAST_MASTER_FILES_CONTAINER = os.getenv('blobForecastMasterFileContainer', "scai/dpai/dev/forecast")
BLOB_SIMULATION_MASTER_FILES_CONTAINER = os.getenv('blobSimulationMasterFileContainer', "scai/dpai/dev/simulation")
BLOB_MASTER_FILES_CONTAINER = os.getenv('blobMasterFileContainer', "scai/dpai/dev/master")
BLOB_DOWNLOAD_URL = os.getenv('blobMasterDownloadUrl', "https://scaiweublbdev.blob.core.windows.net/")